# -*- coding: utf-8 -*-
"""Disease_Diagnosis1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/108Uz9iWdSO3ixTQSnuPtDexkyUdrmWhx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, accuracy_score, confusion_matrix
import seaborn as sns
import numpy as np
import pandas as pd
import sklearn
from sklearn import metrics

df = pd.read_csv('dataset - dataset.csv')

severity_df = pd.read_csv('Symptom-severity.csv')

#Remove the trailing space from the symptom columns

cols = df.columns
data = df[cols].values.flatten()

s = pd.Series(data)
s = s.str.strip()
s = s.values.reshape(df.shape)

df = pd.DataFrame(s, columns=df.columns)
df.head()

df = df.fillna(0)
df.head()

#Encode symptoms in the data with the symptom rank


vals = df.values
symptoms = severity_df['Symptom'].unique()

for i in range(len(symptoms)):
    vals[vals == symptoms[i]] = severity_df[severity_df['Symptom'] == symptoms[i]]['weight'].values[0]
    
d = pd.DataFrame(vals, columns=df.columns)
d.head()

#Assign symptoms with no rank to zero

d = d.replace('dischromic__patches', 0)
d = d.replace('spotting__urination',0)
df = d.replace('foul_smell_of_urine',0)
df.head()

data = df.iloc[:,1:].values
labels = df['Disease'].values

x_train, x_test, y_train, y_test = train_test_split(data, labels, shuffle=True, train_size = 0.85)
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

from sklearn.ensemble import RandomForestClassifier


clf=RandomForestClassifier(n_estimators=100)

# Train the model using the training sets
clf.fit(x_train,y_train)

predicted= clf.predict(x_test)

accuracy = metrics.accuracy_score(y_test, predicted)
print(accuracy * 100 )

#psymptoms = ['itching', 'skin_rash', 'nodal_skin_eruptions','continuous_sneezing', 'shivering']

#diabetes
#psymptoms = ['fatigue','weight_loss','restlessness','lethargy', 'irregular_sugar_level','blurred_and_distorted_vision','obesity','excessive_hunger','polyuria']

#jaundice
psymptoms = [ 'itching', 'vomiting',  'fatigue',  'weight_loss',  'high_fever',  'yellowish_skin',  'dark_urine',  'abdominal_pain']

#Fungal infection
#psymptoms = [ 'itching',  'skin_rash',  'nodal_skin_eruptions',  'dischromic__patches']

#heart attack
#psymptoms = [ 'breathlessness', 'sweating',  'chest_pain']

a = np.array(severity_df["Symptom"])
b = np.array(severity_df["weight"])
for j in range(len(psymptoms)):
  for k in range(len(a)):
      if psymptoms[j]==a[k]:
        psymptoms[j]=b[k]


psymptoms = pd.DataFrame(psymptoms)
psymptoms = psymptoms.replace('dischromic__patches', 0)
psymptoms = psymptoms.replace('spotting__urination',0)
psymptoms = psymptoms.replace('foul_smell_of_urine',0)

#Append zero for extra symptoms
max_symptoms = 17
nulls = [0] * (max_symptoms - len(psymptoms))
#psy = [psymptoms.flatten() + nulls.flatten()]
psy = np.append(psymptoms, nulls)
psy = [psy]

predicted= clf.predict(psy) 
print(predicted)

severity_df["Symptom"].unique()

import joblib
filename = 'finalized_model.pkl'
joblib.dump(clf, filename)

df["Disease"].unique()